var searchIndex = {};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[5,"zero","","Returns the additive identity, `0`."],[5,"one","","Returns the multiplicative identity, `1`."],[5,"abs","","Computes the absolute value."],[5,"abs_sub","","The positive difference of two numbers."],[5,"signum","","Returns the sign of the number."],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[3,"BigUint","num::bigint","A big unsigned integer type."],[3,"BigInt","","A big signed integer type."],[4,"Sign","","A Sign is a `BigInt`'s composing element."],[13,"Minus","","",0],[13,"NoSign","","",0],[13,"Plus","","",0],[0,"big_digit","",""],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s."],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[17,"BITS","",""],[17,"BASE","",""],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[17,"ZERO_BIG_DIGIT","",""],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",1],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",2],[8,"RandBigInt","",""],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",3],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",3],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",3],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[11,"fmt","","",4],[11,"decode","","",4],[11,"encode","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"partial_cmp","","",4],[11,"cmp","","",4],[11,"default","","",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"from_str","","",4],[6,"Output","",""],[11,"bitand","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitand","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"shl","","",4],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",4],[6,"Output","",""],[11,"zero","","",4],[11,"is_zero","","",4],[11,"one","","",4],[6,"Output","",""],[11,"add","","",4],[6,"Output","",""],[6,"Output","",""],[11,"add","","",4],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",4],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",4],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",4],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",4],[6,"Output","",""],[6,"Output","",""],[11,"div","","",4],[6,"Output","",""],[6,"Output","",""],[11,"div","","",4],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",4],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",4],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",4],[6,"Output","",""],[11,"checked_add","","",4],[11,"checked_sub","","",4],[11,"checked_mul","","",4],[11,"checked_div","","",4],[11,"div_rem","","",4],[11,"div_floor","","",4],[11,"mod_floor","","",4],[11,"div_mod_floor","","",4],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",4],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",4],[11,"divides","","Deprecated, use `is_multiple_of` instead.",4],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4],[11,"is_even","","Returns `true` if the number is divisible by `2`.",4],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",4],[11,"to_i64","","",4],[11,"to_u64","","",4],[11,"from_i64","","",4],[11,"from_u64","","",4],[11,"to_biguint","","",5],[11,"to_biguint","","",4],[11,"from_str_radix","","Creates and initializes a `BigUint`.",4],[11,"new","","Creates and initializes a `BigUint`.",4],[11,"from_slice","","Creates and initializes a `BigUint`.",4],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",4],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",4],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",4],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",4],[11,"parse_bytes","","Creates and initializes a `BigUint`.",4],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",4],[11,"decode","","",0],[11,"encode","","",0],[11,"fmt","","",0],[11,"clone","","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Output","",""],[11,"neg","","Negate Sign value.",0],[11,"fmt","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"partial_cmp","","",5],[11,"cmp","","",5],[11,"default","","",5],[11,"fmt","","",5],[11,"hash","","",5],[11,"from_str","","",5],[6,"Output","",""],[11,"shl","","",5],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",5],[6,"Output","",""],[11,"zero","","",5],[11,"is_zero","","",5],[11,"one","","",5],[11,"abs","","",5],[11,"abs_sub","","",5],[11,"signum","","",5],[11,"is_positive","","",5],[11,"is_negative","","",5],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",5],[6,"Output","",""],[11,"checked_add","","",5],[11,"checked_sub","","",5],[11,"checked_mul","","",5],[11,"checked_div","","",5],[11,"div_rem","","",5],[11,"div_floor","","",5],[11,"mod_floor","","",5],[11,"div_mod_floor","","",5],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[11,"to_i64","","",5],[11,"to_u64","","",5],[11,"from_i64","","",5],[11,"from_u64","","",5],[11,"to_bigint","","",5],[11,"to_bigint","","",4],[11,"from_str_radix","","Creates and initializes a BigInt.",5],[11,"new","","Creates and initializes a BigInt.",5],[11,"from_biguint","","Creates and initializes a `BigInt`.",5],[11,"from_slice","","Creates and initializes a `BigInt`.",5],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",5],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",5],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",5],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",5],[11,"parse_bytes","","Creates and initializes a `BigInt`.",5],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",5],[11,"checked_add","","",5],[11,"checked_sub","","",5],[11,"checked_mul","","",5],[11,"checked_div","","",5],[0,"complex","num","Complex numbers."],[3,"Complex","num::complex","A complex number in Cartesian form."],[12,"re","","Real portion of the complex number",6],[12,"im","","Imaginary portion of the complex number",6],[6,"Complex32","",""],[6,"Complex64","",""],[11,"fmt","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"hash","","",6],[11,"clone","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"new","","Create a new Complex",6],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",6],[11,"scale","","Multiplies `self` by the scalar `t`.",6],[11,"unscale","","Divides `self` by the scalar `t`.",6],[11,"inv","","Returns `1/self`",6],[11,"norm","","Calculate |self|",6],[11,"arg","","Calculate the principal Arg of self.",6],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6],[11,"from_polar","","Convert a polar representation into a complex number.",6],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",6],[6,"Output","",""],[11,"zero","","",6],[11,"is_zero","","",6],[11,"one","","",6],[11,"fmt","","",6],[0,"integer","num","Integer trait and functions."],[5,"div_rem","num::integer","Simultaneous integer division and modulus"],[5,"div_floor","","Floored integer division"],[5,"mod_floor","","Floored integer modulus"],[5,"div_mod_floor","","Simultaneous floored integer division and modulus"],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[8,"Integer","",""],[10,"div_floor","","Floored integer division.",7],[10,"mod_floor","","Floored integer modulo, satisfying:",7],[10,"gcd","","Greatest Common Divisor (GCD).",7],[10,"lcm","","Lowest Common Multiple (LCM).",7],[10,"divides","","Deprecated, use `is_multiple_of` instead.",7],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7],[10,"is_even","","Returns `true` if the number is even.",7],[10,"is_odd","","Returns `true` if the number is odd.",7],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7],[0,"iter","num","External iterators for generic mathematics"],[3,"Range","num::iter","An iterator over the range [start, stop)"],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[11,"clone","","",8],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[11,"clone","","",9],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[11,"clone","","",10],[6,"Item","",""],[11,"next","","",10],[11,"clone","","",11],[6,"Item","",""],[11,"next","","",11],[0,"traits","num","Numeric traits for generic mathematics"],[8,"Num","num::traits","The base trait for numeric types"],[8,"Zero","","Defines an additive identity element for `Self`."],[10,"zero","","Returns the additive identity element of `Self`, `0`.",12],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",12],[8,"One","","Defines a multiplicative identity element for `Self`."],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",13],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[10,"abs","","Computes the absolute value.",14],[10,"abs_sub","","The positive difference of two numbers.",14],[10,"signum","","Returns the sign of the number.",14],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",14],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",14],[8,"Unsigned","","A trait for values which cannot be negative"],[8,"Bounded","","Numbers which have upper and lower bounds"],[10,"min_value","","returns the smallest finite number this type can represent",15],[10,"max_value","","returns the largest finite number this type can represent",15],[8,"Saturating","","Saturating math operations"],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",16],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",16],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",17],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",18],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",19],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",20],[0,"rational","num","Rational numbers"],[3,"Ratio","num::rational","Represents the ratio between 2 numbers."],[6,"Rational","","Alias for a `Ratio` of machine-sized integers."],[6,"Rational32","",""],[6,"Rational64","",""],[6,"BigRational","","Alias for arbitrary precision rationals."],[11,"fmt","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"hash","","",21],[11,"clone","","",21],[11,"from_integer","","Creates a ratio representing the integer `t`.",21],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",21],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",21],[11,"to_integer","","Converts to an integer.",21],[11,"numer","","Gets an immutable reference to the numerator.",21],[11,"denom","","Gets an immutable reference to the denominator.",21],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",21],[11,"reduced","","Returns a `reduce`d copy of self.",21],[11,"recip","","Returns the reciprocal.",21],[11,"floor","","Rounds towards minus infinity.",21],[11,"ceil","","Rounds towards plus infinity.",21],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",21],[11,"trunc","","Rounds towards zero.",21],[11,"fract","","Returns the fractional part of a number.",21],[11,"from_float","","Converts a float into a rational number.",21],[11,"eq","","",21],[11,"ne","","",21],[11,"lt","","",21],[11,"gt","","",21],[11,"le","","",21],[11,"ge","","",21],[11,"partial_cmp","","",21],[11,"cmp","","",21],[6,"Output","",""],[11,"mul","","",21],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",21],[6,"Output","",""],[6,"Output","",""],[11,"div","","",21],[6,"Output","",""],[6,"Output","",""],[11,"div","","",21],[6,"Output","",""],[6,"Output","",""],[11,"add","","",21],[6,"Output","",""],[6,"Output","",""],[11,"add","","",21],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",21],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",21],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",21],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",21],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",21],[6,"Output","",""],[11,"zero","","",21],[11,"is_zero","","",21],[11,"one","","",21],[11,"abs","","",21],[11,"abs_sub","","",21],[11,"signum","","",21],[11,"is_positive","","",21],[11,"is_negative","","",21],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",21],[11,"from_str","","Parses `numer/denom` or just `numer`.",21],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",21]],"paths":[[4,"Sign"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[3,"Ratio"]]};
searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path::posix","",5],[11,"decode","","",5],[11,"encode","std::path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[11,"encode","collections::dlist","",10],[11,"decode","","",10],[11,"encode","collections::ring_buf","",11],[11,"decode","","",11],[11,"encode","collections::btree::map","",12],[11,"decode","","",12],[11,"encode","collections::btree::set","",13],[11,"decode","","",13],[11,"encode","std::collections::hash::map","",14],[11,"decode","","",14],[11,"encode","std::collections::hash::set","",15],[11,"decode","","",15],[11,"encode","collections::vec_map","",16],[11,"decode","","",16],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[12,"char_set","","Character set to use",17],[12,"newline","","Newline to use",17],[12,"pad","","True to pad output with `=` characters",17],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17],[4,"CharacterSet","","Available encoding character sets"],[13,"Standard","","The standard character set (uses `+` and `/`)",18],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18],[4,"Newline","","Available newline types"],[13,"LF","","A linefeed (i.e. Unix-style newline)",19],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20],[13,"InvalidBase64Length","","The input had an invalid length",20],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[8,"ToBase64","","A trait for converting a value to base64 encoding."],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21],[8,"FromBase64","","A trait for converting from base64 encoded values."],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22],[11,"fmt","","",20],[11,"description","","",20],[11,"fmt","","",20],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23],[13,"InvalidHexLength","","The input had an invalid length",23],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25],[11,"fmt","","",23],[11,"description","","",23],[11,"fmt","","",23],[0,"json","rustc-serialize","JSON parsing and serialization"],[3,"PrettyJson","rustc-serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",26],[13,"U64","","",26],[13,"F64","","",26],[13,"String","","",26],[13,"Boolean","","",26],[13,"Array","","",26],[13,"Object","","",26],[13,"Null","","",26],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",27],[13,"InvalidNumber","","",27],[13,"EOFWhileParsingObject","","",27],[13,"EOFWhileParsingArray","","",27],[13,"EOFWhileParsingValue","","",27],[13,"EOFWhileParsingString","","",27],[13,"KeyMustBeAString","","",27],[13,"ExpectedColon","","",27],[13,"TrailingCharacters","","",27],[13,"TrailingComma","","",27],[13,"InvalidEscape","","",27],[13,"InvalidUnicodeCodePoint","","",27],[13,"LoneLeadingSurrogateInHexEscape","","",27],[13,"UnexpectedEndOfHexEscape","","",27],[13,"UnrecognizedHex","","",27],[13,"NotFourDigit","","",27],[13,"NotUtf8","","",27],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",28],[13,"IoError","","",28],[4,"DecoderError","",""],[13,"ParseError","","",29],[13,"ExpectedError","","",29],[13,"MissingFieldError","","",29],[13,"UnknownVariantError","","",29],[13,"ApplicationError","","",29],[4,"EncoderError","",""],[13,"FmtError","","",30],[13,"BadHashmapKey","","",30],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",31],[13,"ObjectEnd","","",31],[13,"ArrayStart","","",31],[13,"ArrayEnd","","",31],[13,"BooleanValue","","",31],[13,"I64Value","","",31],[13,"U64Value","","",31],[13,"F64Value","","",31],[13,"StringValue","","",31],[13,"NullValue","","",31],[13,"Error","","",31],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",32],[13,"Key","","",32],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",33],[11,"fmt","","",26],[11,"partial_cmp","","",26],[11,"lt","","",26],[11,"le","","",26],[11,"gt","","",26],[11,"ge","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"fmt","","",27],[11,"description","","",29],[11,"cause","","",29],[11,"fmt","","",29],[11,"description","","",28],[11,"fmt","","",28],[11,"description","","",30],[11,"fmt","","",30],[11,"from_error","","",30],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34],[6,"Error","",""],[11,"emit_nil","","",34],[11,"emit_usize","","",34],[11,"emit_u64","","",34],[11,"emit_u32","","",34],[11,"emit_u16","","",34],[11,"emit_u8","","",34],[11,"emit_isize","","",34],[11,"emit_i64","","",34],[11,"emit_i32","","",34],[11,"emit_i16","","",34],[11,"emit_i8","","",34],[11,"emit_bool","","",34],[11,"emit_f64","","",34],[11,"emit_f32","","",34],[11,"emit_char","","",34],[11,"emit_str","","",34],[11,"emit_enum","","",34],[11,"emit_enum_variant","","",34],[11,"emit_enum_variant_arg","","",34],[11,"emit_enum_struct_variant","","",34],[11,"emit_enum_struct_variant_field","","",34],[11,"emit_struct","","",34],[11,"emit_struct_field","","",34],[11,"emit_tuple","","",34],[11,"emit_tuple_arg","","",34],[11,"emit_tuple_struct","","",34],[11,"emit_tuple_struct_arg","","",34],[11,"emit_option","","",34],[11,"emit_option_none","","",34],[11,"emit_option_some","","",34],[11,"emit_seq","","",34],[11,"emit_seq_elt","","",34],[11,"emit_map","","",34],[11,"emit_map_elt_key","","",34],[11,"emit_map_elt_val","","",34],[11,"encode","","",26],[11,"from_reader","","Decodes a json value from an `&mut old_io::Reader`",26],[11,"from_str","","Decodes a json value from a string",26],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Show`.",26],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26],[6,"Output","",""],[11,"index","","",26],[6,"Output","",""],[11,"index","","",26],[11,"fmt","","",31],[11,"clone","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"fmt","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"new","","",35],[11,"len","","Returns The number of elements in the Stack.",35],[11,"is_empty","","Returns true if the stack is empty.",35],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"top","","Returns the top-most element (if any).",35],[6,"Item","",""],[11,"next","","",36],[11,"new","","Creates the JSON parser.",36],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36],[11,"new","","Create a JSON Builder.",37],[11,"build","","",37],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38],[6,"Error","",""],[11,"read_nil","","",38],[11,"read_usize","","",38],[11,"read_u8","","",38],[11,"read_u16","","",38],[11,"read_u32","","",38],[11,"read_u64","","",38],[11,"read_isize","","",38],[11,"read_i8","","",38],[11,"read_i16","","",38],[11,"read_i32","","",38],[11,"read_i64","","",38],[11,"read_f32","","",38],[11,"read_f64","","",38],[11,"read_bool","","",38],[11,"read_char","","",38],[11,"read_str","","",38],[11,"read_enum","","",38],[11,"read_enum_variant","","",38],[11,"read_enum_variant_arg","","",38],[11,"read_enum_struct_variant","","",38],[11,"read_enum_struct_variant_field","","",38],[11,"read_struct","","",38],[11,"read_struct_field","","",38],[11,"read_tuple","","",38],[11,"read_tuple_arg","","",38],[11,"read_tuple_struct","","",38],[11,"read_tuple_struct_arg","","",38],[11,"read_option","","",38],[11,"read_seq","","",38],[11,"read_seq_elt","","",38],[11,"read_map","","",38],[11,"read_map_elt_key","","",38],[11,"read_map_elt_val","","",38],[11,"error","","",38],[11,"to_json","","",26],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",12],[11,"to_json","std::collections::hash::map","",14],[11,"to_json","core::option","",4],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",26],[11,"fmt","","Encodes a json value into a string",39],[11,"fmt","","Encodes a json value into a string",40],[11,"indent","","Set the indentation level for the emitted JSON",41],[11,"fmt","","Encodes a json value into a string",41],[11,"from_str","","",26],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path::posix","",5],[11,"decode","","",5],[11,"encode","std::path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[8,"Decoder","rustc-serialize",""],[16,"Error","rustc-serialize::Decoder",""],[10,"read_nil","rustc-serialize","",42],[10,"read_usize","","",42],[10,"read_u64","","",42],[10,"read_u32","","",42],[10,"read_u16","","",42],[10,"read_u8","","",42],[10,"read_isize","","",42],[10,"read_i64","","",42],[10,"read_i32","","",42],[10,"read_i16","","",42],[10,"read_i8","","",42],[10,"read_bool","","",42],[10,"read_f64","","",42],[10,"read_f32","","",42],[10,"read_char","","",42],[10,"read_str","","",42],[10,"read_enum","","",42],[10,"read_enum_variant","","",42],[10,"read_enum_variant_arg","","",42],[10,"read_enum_struct_variant","","",42],[10,"read_enum_struct_variant_field","","",42],[10,"read_struct","","",42],[10,"read_struct_field","","",42],[10,"read_tuple","","",42],[10,"read_tuple_arg","","",42],[10,"read_tuple_struct","","",42],[10,"read_tuple_struct_arg","","",42],[10,"read_option","","",42],[10,"read_seq","","",42],[10,"read_seq_elt","","",42],[10,"read_map","","",42],[10,"read_map_elt_key","","",42],[10,"read_map_elt_val","","",42],[10,"error","","",42],[8,"Encoder","",""],[16,"Error","rustc-serialize::Encoder",""],[10,"emit_nil","rustc-serialize","",43],[10,"emit_usize","","",43],[10,"emit_u64","","",43],[10,"emit_u32","","",43],[10,"emit_u16","","",43],[10,"emit_u8","","",43],[10,"emit_isize","","",43],[10,"emit_i64","","",43],[10,"emit_i32","","",43],[10,"emit_i16","","",43],[10,"emit_i8","","",43],[10,"emit_bool","","",43],[10,"emit_f64","","",43],[10,"emit_f32","","",43],[10,"emit_char","","",43],[10,"emit_str","","",43],[10,"emit_enum","","",43],[10,"emit_enum_variant","","",43],[10,"emit_enum_variant_arg","","",43],[10,"emit_enum_struct_variant","","",43],[10,"emit_enum_struct_variant_field","","",43],[10,"emit_struct","","",43],[10,"emit_struct_field","","",43],[10,"emit_tuple","","",43],[10,"emit_tuple_arg","","",43],[10,"emit_tuple_struct","","",43],[10,"emit_tuple_struct_arg","","",43],[10,"emit_option","","",43],[10,"emit_option_none","","",43],[10,"emit_option_some","","",43],[10,"emit_seq","","",43],[10,"emit_seq_elt","","",43],[10,"emit_map","","",43],[10,"emit_map_elt_key","","",43],[10,"emit_map_elt_val","","",43],[8,"Decodable","",""],[10,"decode","","",44],[8,"Encodable","",""],[10,"encode","","",45],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",46],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",47]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"DList"],[3,"RingBuf"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};

initSearch(searchIndex);
